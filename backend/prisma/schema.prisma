// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int    @id @default(autoincrement())
  email     String @unique
  firstName String
  lastName  String
  password  String

  isVerified               Boolean   @default(false)
  verificationToken        String?
  verificationTokenExpires DateTime?

  customCategories Category[]
  transactions     Transaction[]
  pinnedBy         UserPinnedCategory[]
  SavingGoal       SavingGoal[]
}

model Category {
  id           Int                  @id @default(autoincrement())
  name         String
  user         User?                @relation(fields: [userId], references: [id])
  userId       Int? // optional; only when category is created by the user
  transactions Transaction[]
  pinnedBy     UserPinnedCategory[]

  // Each user can only have one category with the same name
  @@unique([name, userId]) // The combination must be unique. 
}

model UserPinnedCategory {
  user       User     @relation(fields: [userId], references: [id])
  userId     Int
  category   Category @relation(fields: [categoryId], references: [id])
  categoryId Int

  @@id([userId, categoryId]) // The combination must be unique. 
}

enum TransactionType {
  INCOME
  EXPENSE
  TRANSFER
}

model Transaction {
  id          Int             @id @default(autoincrement())
  amount      Float
  description String
  date        DateTime        @default(now())
  type        TransactionType

  category     Category?   @relation(fields: [categoryId], references: [id])
  categoryId   Int?
  SavingGoal   SavingGoal? @relation(fields: [savingGoalId], references: [id])
  savingGoalId Int?
  user         User        @relation(fields: [userId], references: [id])
  userId       Int

  // Linking transactions for 'Spend' action in Saving Goals (one-to-one relationship)
  linkedTransactionId Int?         @unique
  linkedTransaction   Transaction? @relation("LinkedTransactions", fields: [linkedTransactionId], references: [id])
  parentTransaction   Transaction? @relation("LinkedTransactions")
}

model SavingGoal {
  id             Int       @id @default(autoincrement())
  name           String
  initialBalance Float     @default(0)
  targetAmount   Float?
  targetDate     DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  transactions Transaction[]

  user   User @relation(fields: [userId], references: [id])
  userId Int
}
